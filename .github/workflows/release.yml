name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.1). If empty, uses version from pyproject.toml'
        required: false
      tag:
        description: 'Tag name (e.g., v1.0.1). If empty, uses v<version>'
        required: false

jobs:
  build-release:
    name: Build PyInstaller EXE and Inno Setup installer
    runs-on: windows-latest
    permissions:
      contents: write
    env:
      PIP_DISABLE_PIP_VERSION_CHECK: 1
      PYTHONUNBUFFERED: 1
      QT_QPA_PLATFORM: offscreen
      MPLBACKEND: Agg
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: pip

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          pip install pyinstaller

      - name: Run tests
        run: pytest -q

      - name: Build with PyInstaller
        run: pyinstaller tradia.spec

      - name: Compute version and tag
        id: meta
        shell: pwsh
        run: |
          $inputVersion = '${{ inputs.version }}'
          if (![string]::IsNullOrEmpty($inputVersion)) {
            $v = $inputVersion
          } else {
            $v = python -c "import tomllib; print(tomllib.load(open('pyproject.toml','rb'))['project']['version'])"
          }
          $inputTag = '${{ inputs.tag }}'
          if (![string]::IsNullOrEmpty($inputTag)) {
            $t = $inputTag
          } else {
            $t = "v$($v.Trim())"
          }
          echo "version=$v" >> $env:GITHUB_OUTPUT
          echo "tag=$t" >> $env:GITHUB_OUTPUT

      - name: Install Inno Setup (Chocolatey)
        shell: pwsh
        run: |
          choco install innosetup --no-progress -y

      - name: Build installer (Inno Setup)
        run: iscc /DMyAppVersion=${{ steps.meta.outputs.version }} tradia.iss

      - name: Create portable ZIP
        shell: pwsh
        run: |
          $zip = "Tradia-portable-${{ steps.meta.outputs.version }}.zip"
          if (Test-Path $zip) { Remove-Item $zip -Force }
          Compress-Archive -Path dist/tradia/* -DestinationPath $zip

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tradia-${{ steps.meta.outputs.version }}-artifacts
          path: |
            dist/tradia/**
            output/*.exe
            Tradia-portable-${{ steps.meta.outputs.version }}.zip

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          target_commitish: ${{ github.sha }}
          name: Tradia v${{ steps.meta.outputs.version }}
          files: |
            output/*.exe
            Tradia-portable-${{ steps.meta.outputs.version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
