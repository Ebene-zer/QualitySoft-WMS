name: CI

on:
  push:
    branches:
      - '**'           # run on all branches so commits get a status
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:   # allow manual runs from the Actions tab

permissions:
  contents: read

jobs:
  build-test:
    name: Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.12", "3.13"]  # Added 3.13 (current) while keeping 3.12 for compatibility

    env:
      QT_QPA_PLATFORM: offscreen  # Run PyQt in headless mode
      PYTHONUNBUFFERED: 1
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install project and dev tools
        shell: bash
        run: |
          set -x
          python -m pip install --upgrade pip
          # Try to install with extras (preferred)
          if ! pip install ".[dev]"; then
            echo "Extras install failed; falling back to requirements + explicit dev tools"
            pip install -r requirements.txt || true
            pip install pytest pytest-qt coverage ruff mypy
            pip install -e .
          fi

      - name: Lint (ruff)
        run: ruff check .

      - name: Type check (mypy)
        run: mypy .

      - name: Run tests with coverage (headless)
        run: |
          python -c "import PyQt6; print('PyQt6 OK')"
          coverage run -m pytest -q
          coverage xml

      - name: Upload coverage to Codecov (optional)
        if: ${{ success() && env.CODECOV_TOKEN != '' }}
        uses: codecov/codecov-action@v4
        with:
          token: ${{ env.CODECOV_TOKEN }}
          files: coverage.xml
          fail_ci_if_error: false

  build-artifacts:
    # Optional job that runs only on version tags to build distributables
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install build deps
        run: pip install --upgrade pip build
      - name: Build wheel & sdist
        run: python -m build
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*
      - name: Publish to PyPI (requires PYPI_API_TOKEN secret)
        if: ${{ env.PYPI_API_TOKEN != '' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ env.PYPI_API_TOKEN }}
